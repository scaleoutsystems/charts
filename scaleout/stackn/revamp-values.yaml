# This is a YAML-formatted file.
# Declare variables to be passed into STACKn templates.

# REQUIREMENT:
# - set a storage class with ability to serve ReadWriteMany
#   Name: storageClassName, and/or set anchor &śtorage_class
#   Description: Set a storage class for the resources that are reused for multi-mount-points in cluster. To reduce wasteful copying we allow to use the same dataset volume to be mounted multiple times.
#   Default: microk8s-hostpath, use nfs-client for docker-for-desktop
# - replace <your-domain>, search and replace
# - cluster_config , kubernetes cluster

#NOTES
# - For local development/testing consider setting "oidc.verify_ssl" to false

#Set global values to overide default
global:
  studio:
    superUser: ""
    superuserPassword: ""
    superuserEmail: ""
  existingSecret: ""
  storageClass: &storage_class microk8s-hostpath

### A Postgres database for STACKn ###
# Here we use https://charts.bitnami.com/bitnami postgresql chart

# Postgres deploy with a single-pod database:
postgresql:
  enabled: true
  postgresqlUsername: stackn
  postgresqlPassword: ""
  postgresqlDatabase: stackn
  existingSecret: ""
  fullnameOverride: stackn-studio-postgres
  service:
    port: 5432
  persistence:
    enabled: true
    size: 20Gi
    storageClass: *storage_class
    accessModes:
      - ReadWriteMany

# Will be added in future realease, for now keep "enabled:false"
postgresql-ha:
  enabled: false

### DEPLOY SECRETS WITH private helm chart 'secrets' from platform/secrets
## Name: imagePullSecret
## Description: Secret to pull images from our private repository.
imagePullSecrets:
  - name: regcred

## to create a regcred
## kubectl create secret docker-registry regcred --docker-server=<your-registry-server> --docker-username=<your-name> --docker-password=<your-pword>

#Set stoargeClass
storageClassName: *storage_class
namespace: default
existingSecret: ""

studio:
  servicename: studio
  replicas: 1
  debug: true
  static:
    replicas: 1
    image: ghcr.io/morganekmefjord/stackn/ingress:master #This image can be built from Dockerfile.nginx inside stackn/components/studio (https://github.com/scaleoutsystems/stackn)
    resources:
      limits:
        cpu: 1
        memory: 512Mi
      requests:
        cpu: 100m
        memory: 256Mi
  image: #tell which image to deploy for studio
    repository: ghcr.io/morganekmefjord/stackn/studio:revamp_auth #This image can be built from Dockerfile inside stackn/components/studio (https://github.com/scaleoutsystems/stackn)
    pullPolicy: Always # used to ensure that each time we redeploy always pull the latest image
  resources:
    limits:
      cpu: 1000m
      memory: 4Gi
    requests:
      cpu: 400m
      memory: 2Gi
  storage:
    StorageClassName: *storage_class
    size: 2Gi
  media:
    storage:
      storageClassName: *storage_class
      size: 5Gi
      accessModes: ReadWriteMany
  superUser: admin
  superuserPassword: ""
  superuserEmail: admin@test.com

celeryWorkers:
  replicas: 2
  resources:
    requests:
      cpu: 100m
      memory: 1Gi
    limits:
      cpu: 1000m
      memory: 8Gi

# Enable ingress if you want your to access the studio solution from a kubernetes host/localhost.
domain: studio.10.0.145.40.nip.io
ingress:
  enabled: true
  image: #tell which image to deploy for studio
    repository: ghcr.io/morganekmefjord/stackn/ingress:master #This image can be built from Dockerfile.nginx inside stackn/components/studio (https://github.com/scaleoutsystems/stackn)
    pullPolicy: Always
  annotations: {}
  hosts:
    - host: studio.10.0.145.40.nip.io

  # setup TLS if you have a platform certificate or use 'tls-acme' if you have certbot deployed and want to generate a certificate.
  tls:
    - secretName: prod-ingress
      hosts:
        - studio.10.0.145.40.nip.io

service:
  type: ClusterIP #override if you want to use NodePort instead to access cluster services

# default credentials for rabbitmq. override in production!
rabbit:
  username: admin
  password: ""

chartcontroller:
  enabled: false
  image:
    repository: scaleoutsystems/chart-controller:master
    pullPolicy: Always
  branch: master
  resources:
    limits:
      cpu: 200m
      memory: 512Mi
    requests:
      cpu: 200m
      memory: 512Mi
  #addSecret -- if true create chart-controller-secret from cluster_config, if false it must be added manually
  addSecret: true


### Cluster config ###
# kubectl config view --raw
cluster_config: |-
  apiVersion: v1
  clusters:
  - cluster:
      certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUREekNDQWZlZ0F3SUJBZ0lVU2FuRGtzSzFOVEVhMWVHOWFYREhVbmFpM3hFd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0Z6RVZNQk1HQTFVRUF3d01NVEF1TVRVeUxqRTRNeTR4TUI0WERUSXhNRGt5TWpFeU5UazFOMW9YRFRNeApNRGt5TURFeU5UazFOMW93RnpFVk1CTUdBMVVFQXd3TU1UQXVNVFV5TGpFNE15NHhNSUlCSWpBTkJna3Foa2lHCjl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUFyTnA4SWh0cTRRWHRPTklJcWxlTnlZbjdXTVZvMWxkR3ZzSmcKYnRlV29Zb1E1MFlEMitMdHRZWFM4WG5mYytHMEpLN3FTM3lyNWMvcEhpNTh5SGZ4QU5Vd3lsNEgwT01Lb2cwVwpKempXcTNQNWRVTGpMWDBZTy93ZzcrRmVBcGJ5SHUzcWVsTGJQNHJUUnBUU0xva2o2ZVJtS25MRUZVQ1YwZG55CjVTY0JtZ3pEbzdGVHM1ZzVTSUdpQ1NDa1ZTMmlvZE4xUWlTOTlnQi8yMVBSdXl3WXZLbVlSZENVRDVFMUVlL3AKZjVPQVh2ZTJkVEg2TytOUTQrS21UQnh1TC9Wd1pJR3NnQ3pTQURBNFFiQ1poa0FBdGd6R2RqaU1RRDBLbUh2WApqanVZMlNWVkcrS2Naa2puT2xNc0pZQk5aSjRmc3FQcXZxK055WHJ3V280aERGbkZZUUlEQVFBQm8xTXdVVEFkCkJnTlZIUTRFRmdRVW9lTjNSWlRiMk16Q0Z0Rkh5QU9jRjZtQWEwRXdId1lEVlIwakJCZ3dGb0FVb2VOM1JaVGIKMk16Q0Z0Rkh5QU9jRjZtQWEwRXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QU5CZ2txaGtpRzl3MEJBUXNGQUFPQwpBUUVBYm9LMWlTWmhzREdweEU3Y2dGazdLbmdRNDRuNGh3UXJENG9tNkdtZjBvalFyQ1JPaGRSaXBCb0oxZWdyCkJiRCtmcVNyTTFNdjd5QXIwMkVPQS85d2lrNkRrenl2RERGR1lyNVJHOUIwc2FFcmN4cVZjQzR3OVAvM3lKZFUKczZWVWlBUWhuNkJHYjJ0RW5rU0R0VVI4b0Y4Uyt6eStCY0VDOVl2SWNkbWZCS3hsMTg3dG0wRmpvVmhCNjBKbQoxNlhtMHhZbjhOekJWVmYvUlNIQ2ZzUW1Oa1dVdUUxQXFadU0vaXVKeitHRlpHczVJellONUxYR3JEREYxczJRClV3eERHL21QTFhDMVhjakxYVHNPcTc0QjRWOXNnQm1MTkdEMjdYdjhueFBGeEl2amEwb21xM0R4MW9qSmcxU1QKakIrVko0Qm1uSVQ0emlaTCtTMTR1WVpkeWc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
      server: https://10.0.145.40:16443
    name: microk8s-cluster
  contexts:
  - context:
      cluster: microk8s-cluster
      user: admin
    name: microk8s
  current-context: microk8s
  kind: Config
  preferences: {}
  users:
  - name: admin
    user:
      token: RDdLMnk3dUcrTDAxY2NMM3N3UEk5VTMyREZOTTcrNlFxZkF3bWFUODZpdz0K

# Django fixtures for defining:
# - app categories
# - object types (to categorize “objects”, often model objects). We might for instance want a few different
#   categories such as “models”, “tensorflow models”, and “FEDn Compute Packages”). An object is a pointer to a file stored in S3.
# - Periodic Celery tasks. These are controlled from the Django database. By default, we have three tasks: One that syncs MLflow
#   models to STACKn objects, one that checks app statuses, and one that checks resource usage.
fixtures: |-
  [
    {
      "model": "projects.projecttemplate",
      "pk": 1,
      "fields": {
        "name": "STACKn Default",
        "slug": "default",
        "description": "Default project template.",
        "template": {
          "flavors": {
              "Medium": {
                  "cpu": {
                      "requirement": "100m",
                      "limit": "1000m"
                  },
                  "mem": {
                      "requirement": "1Gi",
                      "limit": "8Gi"
                  },
                  "gpu": {
                      "requirement": "0",
                      "limit": "0"
                  },
                  "ephmem": {
                      "requirement": "50Mi",
                      "limit": "100Mi"
                  }
              }
          },
          "environments": {
              "Jupyter Notebook": {
                  "repository": "scaleoutsystems",
                  "image": "jupyter-stackn:v0.1.5",
                  "app": "lab"
              },
              "Default Serving": {
                  "repository": "scaleoutsystems",
                  "image": "default-python:latest",
                  "app": "fastapi-serve"
              },
              "MLflow Serving": {
                  "repository": "scaleoutsystems",
                  "image": "mlflow-serve:latest",
                  "app": "mlflow-serve"
              },
              "Ubuntu": {
                  "repository": "scaleoutsystems",
                  "image": "wetty-ubuntu:v0.1.2",
                  "app": "ubuntu-terminal"
              },
              "Dask": {
                  "repository": "daskdev",
                  "image": "dask",
                  "app": "dask-cluster"
              },
              "FEDn Reducer": {
                  "repository": "scaleoutsystems",
                  "image": "fedn-reducer:master",
                  "app": "reducer"
              },
              "FEDn Combiner": {
                  "repository": "scaleoutsystems",
                  "image": "fedn-combiner:master",
                  "app": "combiner"
              }
          },
          "apps": {
              "minio-vol": {
                  "slug": "volume",
                  "volume.size": "5Gi",
                  "permission": "project"
              },
              "reg-vol": {
                  "slug": "volume",
                  "volume.size": "5Gi",
                  "permission": "project"
              },
              "project-vol": {
                  "slug": "volume",
                  "volume.size": "5Gi",
                  "permission": "project"
              },
              "project-minio": {
                  "slug": "minio",
                  "app:volume": ["minio-vol"],
                  "credentials.access_key": "accesskey2",
                  "credentials.secret_key": "secretkey193",
                  "permission": "project"
              },
              "project-registry": {
                  "slug": "docker_registry",
                  "app:volume": ["reg-vol"],
                  "credentials.username": "username123",
                  "credentials.password": "pass999111222",
                  "permission": "project"
              }
          },
          "settings": {
              "project-S3": "project-minio"
          }
        }       
      }
    },
    {
      "model": "projects.projecttemplate",
      "pk": 2,
      "fields": {
        "name": "FEDn MNIST",
        "slug": "fedn-mnist",
        "description": "FEDn MNIST project template.",
        "template": {
          "flavors": {
              "CPU": {
                  "cpu": {
                      "requirement": "100m",
                      "limit": "4000m"
                  },
                  "mem": {
                      "requirement": "1Gi",
                      "limit": "16Gi"
                  },
                  "gpu": {
                      "requirement": "0",
                      "limit": "0"
                  },
                  "ephmem": {
                      "requirement": "50Mi",
                      "limit": "100Mi"
                  }
              }
          },
          "environments": {
              "Jupyter STACKn": {
                  "repository": "scaleoutsystems",
                  "image": "jupyter-stackn:v0.1.5",
                  "app": "lab"
              },
              "Ubuntu": {
                  "repository": "scaleoutsystems",
                  "image": "wetty-ubuntu:v0.1.2",
                  "app": "ubuntu-terminal"
              },
              "Dask": {
                  "repository": "daskdev",
                  "image": "dask",
                  "app": "dask-cluster"
              },
              "FEDn Reducer": {
                  "repository": "scaleoutsystems",
                  "image": "fedn-reducer:master",
                  "app": "reducer"
              },
              "FEDn Combiner": {
                  "repository": "scaleoutsystems",
                  "image": "fedn-combiner:master",
                  "app": "combiner"
              },
              "MNIST Client": {
                  "repository": "scaleoutsystems",
                  "image": "mnist-client:v0.6.0",
                  "app": "fedn-client"
              }
          },
          "apps": {
              "minio-vol": {
                "slug": "volume",
                "volume.size": "20Gi",
                "permission": "private"
              },
              "reg-vol": {
                  "slug": "volume",
                  "volume.size": "20Gi",
                  "permission": "private"
              },
              "project-vol": {
                  "slug": "volume",
                  "volume.size": "20Gi",
                  "permission": "private"
              },
              "mongodb-vol": {
                  "slug": "volume",
                  "volume.size": "5Gi",
                  "permission": "private"
              },
              "combiner-vol": {
                  "slug": "volume",
                  "volume.size": "5Gi",
                  "permission": "private"
              },
              "S3 store": {
                  "slug": "minio",
                  "app:volume": ["minio-vol"],
                  "credentials.access_key": "accesskey2",
                  "credentials.secret_key": "secretkey193"
              },
              "FEDn MongoDB": {
                  "slug": "mongodb",
                  "app:volume": ["mongodb-vol"],
                  "credentials.username": "admin",
                  "credentials.password": "password"
              },
              "FEDn MongoExpress": {
                  "slug": "mongo-express",
                  "app:mongodb": ["FEDn MongoDB"]
              },
              "Docker Registry": {
                  "slug": "docker_registry",
                  "app:volume": ["reg-vol"],
                  "credentials.username": "username123",
                  "credentials.password": "pass999111222"
              },
              "Reducer": {
                  "slug": "reducer",
                  "S3": "S3 store",
                  "environment": "FEDn Reducer",
                  "app:mongodb": ["FEDn MongoDB"],
                  "app:docker_registry": ["Docker Registry"],
                  "reducer.pullPolicy": "IfNotPresent"
              },
              "Combiner": {
                  "slug": "combiner",
                  "app:volume": ["combiner-vol"],
                  "app:reducer": ["Reducer"],
                  "environment": "FEDn Combiner",
                  "combiner.pullPolicy": "IfNotPresent"
              }
          },
          "settings": {
              "project-S3": "S3 store"   
          }
        }
      }
    },
    {
      "model": "apps.appcategories",
      "pk": "compute",
      "fields": {
        "name": "Compute"
      }
    },
    {
      "model": "apps.appcategories",
      "pk": "fedn",
      "fields": {
        "name": "FEDn"
      }
    },
    {
      "model": "apps.appcategories",
      "pk": "develop",
      "fields": {
        "name": "Develop"
      }
    },
    {
      "model": "apps.appcategories",
      "pk": "serve",
      "fields": {
        "name": "Serve"
      }
    },
    {
      "model": "apps.appcategories",
      "pk": "store",
      "fields": {
        "name": "Store"
      }
    },
    {
      "model": "apps.apps",
      "pk": 1,
      "fields": {
        "name": "Jupyter Lab",
        "slug": "lab",
        "category": "compute",
        "table_field": {
          "url": "https://{{ release }}.{{ global.domain }}"
        },
        "description": "",
        "priority": "500",
        "settings": {
          "apps": {
            "Persistent Volume": "many"
          },
          "flavor": "one",
          "environment": {
            "name": "from",
            "title": "Image",
            "quantity": "one",
            "type": "match"
          },
          "permissions": {
            "public": {
              "value": "false",
              "option": "false"
            },
            "project": {
              "value": "true",
              "option": "true"
            },
            "private": {
              "value": "false",
              "option": "true"
            }
          },
          "export-cli": "True"
        },
        "chart": "apps/lab/chart",
        "logo": "apps/lab/logo.png",
        "updated_on": "2021-03-10T19:45:03.927Z",
        "created_on": "2021-02-19T21:34:37.815Z"
      }
    },
    {
      "model": "apps.apps",
      "pk": 2,
      "fields": {
        "name": "Persistent Volume",
        "slug": "volume",
        "category": "store",
        "table_field": {},
        "description": "",
        "priority": "600",
        "settings": {
          "volume": {
            "size": {
              "type": "string",
              "default": "1Gi",
              "title": "Size"
            },
            "storageClass": {
              "type": "string",
              "default": "",
              "title": "StorageClass"
            },
            "accessModes": {
              "type": "string",
              "default": "ReadWriteMany",
              "title": "AccessModes"
            }
          },
          "permissions": {
            "public": {
              "value": "false",
              "option": "false"
            },
            "project": {
              "value": "true",
              "option": "true"
            },
            "private": {
              "value": "false",
              "option": "true"
            }
          }
        },
        "chart": "apps/volume/chart",
        "logo": "apps/volume/logo.png",
        "updated_on": "2021-03-10T19:45:03.927Z",
        "created_on": "2021-02-19T21:34:37.815Z"
      }
    },
    {
      "model": "django_celery_beat.intervalschedule",
      "pk": 1,
      "fields": {
        "every": 3,
        "period": "seconds"
      }
    },
    {
      "model": "django_celery_beat.intervalschedule",
      "pk": 2,
      "fields": {
        "every": 15,
        "period": "seconds"
      }
    },
    {
    "model": "django_celery_beat.periodictask",
    "pk": 1,
    "fields": {
      "name": "celery.backend_cleanup",
      "task": "celery.backend_cleanup",
      "interval": 1,
      "crontab": null,
      "solar": null,
      "clocked": null,
      "args": "[]",
      "kwargs": "{}",
      "queue": null,
      "exchange": null,
      "routing_key": null,
      "headers": "{}",
      "priority": null,
      "expires": null,
      "expire_seconds": 43200,
      "one_off": false,
      "start_time": null,
      "enabled": true,
      "last_run_at": null,
      "total_run_count": 0,
      "date_changed": "2021-02-26T13:49:34.038Z",
      "description": ""
    }
    },
    {
      "model": "django_celery_beat.periodictask",
      "pk": 2,
      "fields": {
        "name": "check_resource_usage",
        "task": "apps.tasks.get_resource_usage",
        "interval": 2,
        "crontab": null,
        "solar": null,
        "clocked": null,
        "args": "[]",
        "kwargs": "{}",
        "queue": null,
        "exchange": null,
        "routing_key": null,
        "headers": "{}",
        "priority": null,
        "expires": null,
        "expire_seconds": null,
        "one_off": false,
        "start_time": null,
        "enabled": true,
        "last_run_at": "2021-02-26T14:03:34.731Z",
        "total_run_count": 45,
        "date_changed": "2021-02-26T14:03:40.178Z",
        "description": ""
      }
    },
    {
      "model": "django_celery_beat.periodictask",
      "pk": 3,
      "fields": {
        "name": "check_app_status",
        "task": "apps.tasks.check_status",
        "interval": 1,
        "crontab": null,
        "solar": null,
        "clocked": null,
        "args": "[]",
        "kwargs": "{}",
        "queue": null,
        "exchange": null,
        "routing_key": null,
        "headers": "{}",
        "priority": null,
        "expires": null,
        "expire_seconds": null,
        "one_off": false,
        "start_time": null,
        "enabled": true,
        "last_run_at": "2021-02-26T14:03:37.169Z",
        "total_run_count": 174,
        "date_changed": "2021-02-26T14:03:40.168Z",
        "description": ""
      }
    },
    {
    "model": "models.objecttype",
    "pk": 1,
    "fields": {
      "name": "Model",
      "slug": "model",
      "apps": []
      }
    },
    {
    "model": "models.objecttype",
    "pk": 2,
    "fields": {
      "name": "FEDn Client",
      "slug": "fedn-client",
      "apps": []
      }
    },
    {
    "model": "models.objecttype",
    "pk": 3,
    "fields": {
      "name": "MLFlow Model",
      "slug": "mlflow-model",
      "apps": []
      }
    }
  ]

docker-registry:
  enabled: false
  ingress:
    enabled: true
    annotations:
      nginx.ingress.kubernetes.io/proxy-body-size: "5500m"
    hosts:
      - registry.10.0.145.40.nip.io
    tls:
      - secretName: prod-ingress
        hosts:
          - registry.10.0.145.40.nip.io

  persistence:
    enabled: true
    accessMode: ReadWriteOnce
    size: 2Gi
    storageClass: *storage_class

reloader:
  enabled: true
  namespace: default
  reloader:
    watchGlobally: false

labs:
  ingress:
    secretName: prod-ingress

prometheus:
  enabled: false

loki-stack:
  enabled: false

grafana:
  enabled: false


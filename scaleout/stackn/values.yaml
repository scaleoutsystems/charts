# This is a YAML-formatted file.
# Declare variables to be passed into STACKn templates.

# REQUIREMENT: 
# - set a storage class with ability to serve ReadWriteMany
#   Name: storageClassName, and/or set anchor &Å›torage_class
#   Description: Set a storage class for the resources that are reused for multi-mount-points in cluster. To reduce wasteful copying we allow to use the same dataset volume to be mounted multiple times.
#   Default: microk8s-hostpath, use nfs-client for docker-for-desktop

#Set global values to overide default
global:
  studio:
    superUser: "" ##these are currently not handled by stackn: default: admin
    superuserPassword: ""
    superuserEmail: ""  ##these are currently not handled by stackn: default: admin@test.com
  existingSecret: 
  storageClass: &storage_class microk8s-hostpath

#Set stoargeClass
storageClassName: *storage_class
namespace: default
existingSecret: ""

studio:
  servicename: studio
  replicas: 1
  debug: true
  static:
    replicas: 1
    image: ghcr.io/scaleoutsystems/stackn/ingress:develop
    resources:
      limits:
        cpu: 1
        memory: "512Mi"
      requests:
        cpu: "100m"
        memory: "256Mi"
  image: #tell which image to deploy for studio
    repository: ghcr.io/scaleoutsystems/stackn/studio:develop #This image can be built from Dockerfile inside stackn/components/studio (https://github.com/scaleoutsystems/stackn)
    pullPolicy: Always # used to ensure that each time we redeploy always pull the latest image
  resources:
    limits:
      cpu: "1000m"
      memory: "4Gi"
    requests:
      cpu: "400m"
      memory: "2Gi"
  storage:
    StorageClassName: *storage_class
    size: "2Gi"
  media:
    storage:
      storageClassName: *storage_class
      size: "5Gi"
      accessModes: ReadWriteMany
  superUser: admin
  superuserPassword: ""
  superuserEmail: admin@test.com

# Enable ingress if you want your to access the studio solution from a kubernetes host/localhost.
domain: studio.<your-domain.com> 
auth_domain: studio.<your-domain.com>
session_cookie_domain: .<your-domain.com>
ingress:
  enabled: true
  annotations: {}
  hosts:
    - host: studio.<your-domain.com>
  # setup TLS if you have a platform certificate or use 'tls-acme' if you have certbot deployed and want to generate a certificate.
  tls:
    - secretName: prod-ingress
      hosts:
        - studio.<your-domain.com>

### A Postgres database for STACKn ###
# Here we use https://charts.bitnami.com/bitnami postgresql chart 

# Postgres deploy with a single-pod database:
postgresql:
  enabled: true
  postgresqlUsername: stackn
  postgresqlPassword: stackn
  postgresqlPostgresPassword: stackn    #NOTE! To be changed in production!
  postgresqlDatabase: stackn
  existingSecret: stackn
  fullnameOverride: stackn-studio-postgres
  service:
    port: 5432
  persistence:
    enabled: true
    size: "10Gi"
    storageClass: *storage_class
    accessModes:
      - ReadWriteMany

# Will be added in future realease, for now keep "enabled:false"
postgresql-ha:
  enabled: false

### DEPLOY SECRETS WITH private helm chart 'secrets' from platform/secrets
## Name: imagePullSecret
## Description: Secret to pull images from our private repository.
imagePullSecrets:
  - name: regcred

## to create a regcred
## kubectl create secret docker-registry regcred --docker-server=<your-registry-server> --docker-username=<your-name> --docker-password=<your-pword>

celeryWorkers:
  replicas: 2
  resources:
    requests:
      cpu: "100m"
      memory: "1Gi"
    limits:
      cpu: "1000m"
      memory: "8Gi"

# default credentials for rabbitmq. override in production!
rabbit:
  username: admin
  password: ""

chartcontroller:
  enabled: false
  #addSecret -- if true create chart-controller-secret from cluster_config, if false it must be added manually
  addSecret: true

docker-registry:
  enabled: false

prometheus:
  enabled: false

loki-stack:
  enabled: false

grafana:
  enabled: false

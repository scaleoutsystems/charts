# Default values for alliance-chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

### DEPLOY SECRETS WITH private helm chart 'secrets' from platform/secrets
## Name: imagePullSecret
## Description: Secret to pull images from our private repository.
imagePullSecrets:
  - name: regcred

## to create a regcred
## kubectl create secret docker-registry regcred --docker-server=<your-registry-server> --docker-username=<your-name> --docker-password=<your-pword>

# REQUIREMENT: set a storage class with ability to serve ReadWriteMany
# Name: storageClassName
# Description: Set a storage class for the resources that are reused for multi-mount-points in cluster. To reduce wasteful copying we allow to use the same dataset volume to be mounted multiple times.
# Default: hostpath (works with docker-for-desktop)
storageClassName: microk8s-hostpath
namespace: default

studio:
  servicename: studio
  image: #tell which image to deploy for studio
    repository: scaleoutsystems/studio:master # point to the latest beta image
    # studio.image.repository -- Select which version of Studio to deploy, default is master branch.
    pullPolicy: Always # used to ensure that each time we redeploy always pull the latest image
  resources:
    limits:
      cpu: 1000m
      memory: 4Gi
    requests:
      cpu: 400m
      memory: 2Gi
  storage:
    StorageClassName: microk8s-hostpath
    size: 5Gi
      
# Enable ingress if you want your to access the studio solution from a kubernetes host/localhost.
domain: studio.your-domain.com
# domain -- Domain name, should match ingress.hosts.host
ingress:
  enabled: true
  image: #tell which image to deploy for studio
    repository: scaleoutsystems/ingress:master
    pullPolicy: Always
  annotations: {}
  hosts:
    - host: studio.your-domain.com
    # ingress.hosts[0].host -- Ingress to Studio. Should match domain.
  # setup TLS if you have a platform certificate or use 'tls-acme' if you have certbot deployed and want to generate a certificate.
  tls:
    - secretName: prod-ingress
    # ingress.tls[0].secretName -- The certificate should be a wildcard cert for *.your-domain.com and *.studio.your-domain.com
      hosts:
        - studio.your-domain.com

labs:
  ingress:
    secretName: prod-ingress

service:
  type: ClusterIP #override if you want to use NodePort instead to access cluster services

#override if you want to try out a HA (HIGH AVAILABILITY) setup.
replicaCount: 1

# override if certain resource requirements should apply
resources: {}

# override if certain nodes should be used for the deployed resources.
nodeSelector: {}

# override if declaring that some criteria is tolerated for resource co-existing.
tolerations: []

affinity: {}



# Postgres default credentials for backend DB. Override for security!
postgres:
  image: postgres
  db:
    name: postgres
    user: postgres
    password: postgres
  resources:
    limits:
      cpu: 400m
      memory: 2Gi
    requests:
      cpu: 200m
      memory: 1Gi

# default credentials for rabbitmq. override in production!
rabbit:
  username: admin
  password: LJqEG9RE4FdZbVWoJzZIOQEI

chartcontroller:
  image:
    repository: scaleoutsystems/chart-controller:master
    # studio.image.repository -- Select which version of the chart controller to deploy, default is master branch.
    pullPolicy: Always
  branch: master
  resources:
    limits:
      cpu: 200m
      memory: 512Mi
    requests:
      cpu: 200m
      memory: 512Mi
  #addSecret -- if true create chart-controller-secret from cluster_config, if false it must be added manually
  addSecret: true



cluster_config: |-
    apiVersion: v1
    kind: Config
    clusters:
    - name: "local"
      cluster:
        server: "your.server.here"
    users:
    - name: "local"
      user:
        token: "your.token.here"

    contexts:
    - name: "local"
      context:
        user: "local"
        cluster: "local"

    current-context: "local"
# cluster_config -- Config file for your cluster. Should allow admin access for your namespace.

fixtures: |-
  []

docker-registry:
    enabled: true
    ingress:
        enabled: false
        annotations:
          nginx.ingress.kubernetes.io/proxy-body-size: "5500m"
        hosts:
            - registry.your-domain.com
        tls:
            - secretName: prod-ingress
              hosts:
                  - registry.your-domain.com

    persistence:
      enabled: true
      accessMode: ReadWriteOnce
      size: 4Gi
      storageClass: microk8s-hostpath

argo:
  installCRD: false
  enabled: false
  ui:
    ingress:
        enabled: true
        annotations:
          nginx.ingress.kubernetes.io/proxy-body-size: 1000m
        hosts:
            - workflow.your-domain.com
        tls:
            - secretName: prod-ingress
              hosts:
                  - workflow.your-domain.com

argo-events:
  enabled: false
  installCRD: false
  namespace: argo-events
  singleNamespace: false


openfaas:
    enabled: false
    functionNamespace: stack-fn
    exposeServices: false
    async: true
    rbac: false
    psp: false
    securityContext: true
    basic_auth: false
    operator:
        create: true
    ingress:
      enabled: false
      hosts:
        - host: serve.your-domain.com
          serviceName: gateway
          servicePort: 8080
          path: /
      #annotations: {}
      tls:
        - secretName: prod-ingress
          hosts:
            - serve.your-domain.com

keycloak:
  ingress:
    enabled: true
    annotations:
      nginx.ingress.kubernetes.io/proxy-buffer-size: "128k"
    rules:
      - host: "keycloak.your-domain.com"
        paths: [/]
    tls:
      - secretName: prod-ingress
        hosts:
          - keycloak.your-domain.com
  persistence:
    deployPostgres: true
    dbVendor: postgres
    pullPolicy: Always

  extraVolumes: |
    - name: realm-secret
      secret:
        secretName: realm-secret

  extraVolumeMounts: |
    - name: realm-secret
      mountPath: "/realm/"
      readOnly: true
    
  extraEnv: |
    - name: KEYCLOAK_IMPORT
      value: /realm/realm.json
    - name: KEYCLOAK_USER
      value: admin
    - name: KEYCLOAK_PASSWORD
      value: password
    - name: PROXY_ADDRESS_FORWARDING
      value: "true"

  postgresql:
    postgresqlUsername: keycloak
    postgresqlPassword: db_password
    postgresqlDatabase: keycloak
    persistence:
      enabled: true
      storageClass: microk8s-hostpath
      size: 1Gi

  args:
    - "-Dkeycloak.profile.feature.token_exchange=enabled"

prometheus:
  enabled: true
  server:
    ingress:
      enabled: true
      hosts:
        - prometheus.your-domain.com
      tls:
        - secretName: prod-ingress
          hosts:
            - prometheus.your-domain.com

loki-stack:
  enabled: true

grafana:
  enabled: true
  grafana.ini:
    server:
      domain: grafana.your-domain.com
      root_url: "%(protocol)s://%(domain)s/"
      serve_from_sub_path: true
  ingress:
    enabled: true
    hosts:
      - "grafana.your-domain.com"
    path: "/"

    tls:
        - secretName: prod-ingress
          hosts:
            - grafana.your-domain.com

  persistence:
    enabled: true
    type: pvc
    size: 4Gi
    storageClassName: microk8s-hostpath

oidc:
  enabled: true
  realm: STACKn
  client_id: studio
  client_secret: a-client-secret
  host: https://keycloak.your-domain.com
  sign_algo: RS256
  id_token_expiry_seconds: 180
  verify_ssl: true

fedn:
  enabled: false


# This is a YAML-formatted file.
# Declare variables to be passed into STACKn templates.

# NOTES: 
# - set a storage class everywhere you can see storageClass: ""
# - if you want to use an existing secret, set the name of the secret everywhere you see existingSecret: ""
#   furthermore, the Bitnami subcharts (postgresql) also usually have a existingSecret value
# - Bitnami subcharts (postgresql) also usually have existingStorage values
# - if NetworkPolicy is enabled, set the kubernetes api server endpoints and port
# - Please set all values named password, the chart do have features to generate passwords, 
#   but this is not always working as expected during upgrades.
# - Please do not change values with "Do not change unless you know what you are doing."

#Set global values to overide default
global:
  studio:
    superUser: "" ##these are currently not handled by stackn: default: admin
    superuserPassword: ""
    superuserEmail: ""  ##these are currently not handled by stackn: default: admin@test.com
    existingSecret: ""
    storageClass: ""
    eventListenerUserPassword: ""
  postgresql:
      auth:
        username: studio # username for postgresql
        password: "" # password for postgresql
        postgresPassword: "" # password for postgresql
        database: studio # database name for postgresql
        existingSecret: "" # name of existing secret containing postgresPassword (optional)
      storageClass:


namespace: default # namespace to deploy stackn in
existingSecret: "" # name of existing secret, should replace basic-secrets.yaml
serviceAccount: # service account for stackn
  create: true # create service account
  automountServiceAccountToken: true # automount service account token
rbac: # rbac for stackn
  create: true # create rbac

commonLabels: {} # common labels for stackn
commonAnnotations: {} # common annotations for stackn

networkPolicy: # network policy for stackn
  enable: false # enable network policy
  kubernetes: 
    cidr: # To get kubernetes api server endpoints run: $ kubectl get endpoints kubernetes
    port: 6443  # port for kubernetes api server
  internal_cidr: # in-cluster IpBlock cidr, used in allow-internet-[egress|ingress] policy, e.g:
    - 10.0.0.0/8
    - 192.168.0.0/16
    - 172.0.0.0/20
  ingress_controller_namespace: kube-system # namespace for ingress controller


studio: # studio values
  servicename: studio # name of studio service
  replicas: 1 # number of studio replicas
  strategy: # strategy for studio
    type: RollingUpdate # type of strategy
  debug: true # debug mode for studio Django server
  init: true # init studio script (deprecated)
  enable_project_extra_settings: false # enable project extra settings. Do not change unless you know what you are doing.
  inactive_users: False # inactive users by default. When set to True, users will be inactive by default and need to be activated by an admin.
  custom_apps: # custom apps for studio. Do not change unless you know what you are doing.
    enabled: true
    apps:
    - "common"
  custom_migrations: # custom migrations for studio. Do not change unless you know what you are doing.
    enabled: false
    apps:
      user: "studio.migrations.user"
      control: "studio.migrations.control"
  auth_user_model: # auth user model for studio. Do not change unless you know what you are doing.
    override: false
    model: "user.User"
  jwt_auth: # Use JWT authentication for REST and client authentication. Needs exsiting secret with private key.
    enabled: false
    algorithm: RS256
    public_key: "" # If algorithm is RS256, set RSA public key here 
    existingSecret: "" # name of existing secret containing private key, need "private_key" key
  csrf_trusted_origins: # csrf trusted origins for studio. Add extra trusted origins for CSRF protection.
  kube_api_request_timeout: 1 # timeout for kubernetes api requests, such as request to create/delete resources
  static: # static values for studio, ngnix server for serving static files and media files
    replicas: 1 # number of static replicas
    strategy: # strategy for static
      type: Recreate # type of strategy
    image: ghcr.io/scaleoutsystems/stackn/studio:develop # image for static
    pullPolicy: IfNotPresent # pull policy for static
    resources: # resources for static
      limits: # limits for static
        cpu: 1 # cpu limit for static
        memory: "512Mi" # memory limit for static
      requests: # requests for static
        cpu: "100m" # cpu request for static
        memory: "256Mi" # memory request for static
  image: #tell which image to deploy for studio
    repository: ghcr.io/scaleoutsystems/stackn/ingress:develop #This image can be built from Dockerfile inside stackn/components/studio (https://github.com/scaleoutsystems/stackn)
    pullPolicy: IfNotPresent # used to ensure that each time we redeploy always pull the latest image
  resources:
    limits:
      cpu: "1000m"
      memory: "4Gi"
    requests:
      cpu: "20m"
      memory: "2Gi"
  storage:
    storageClass: ""
  media:
    storage:
      storageClass: ""
      size: "5Gi"
      accessModes: ReadWriteMany
    mount_path: /app/media/
  superUser: admin
  superuserPassword: ""
  superuserEmail: admin@test.com
  eventListenerUsername: ""
  eventListenerUserPassword: ""
  version: studio
  securityContext:
    enabled: true
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000
    allowPrivilegeEscalation: false
    privileged: false 
  readinessProbe: # readiness probe for studio. Do not change unless you know what you are doing.
    enabled: true
    tcpSocket:
      port: 8080
    initialDelaySeconds: 20
    periodSeconds: 10
  livenessProbe: # liveness probe for studio. Do not change unless you know what you are doing.
    enabled: true
    tcpSocket:
      port: 8080
    initialDelaySeconds: 20
    periodSeconds: 20
  djangoSecret: '' # django secret for studio (optional, will be generated if not set)
  emailService: # email service for studio. Please concact Scaleout if you want to use this feature.
    enabled: false
    host: ''
    port: 587
    hostUser: ''
    hostPassword: ''
    smtpEmailFrom: ''
    domainName: ''
    apiEndpoint: ''
    apiKey: ''
    notifyOnAccountRegisterList:
      - ''
  disabledAppInstanceFields: # disabled app instance fields for studio. Do not change unless you know what you are doing.
    enabled: false
    fields:
      - ''
  discord:
    alert_on_new_user: false
    alert_webhook_url: ''
    alert_on_new_user_message: ''

  argocd:
    enabled: true
    url: ''
    token: ''
    project: "default"
    namespace: "default"
    server: "https://kubernetes.default.svc"
  
  project:
    repo: "harbor.scaleoutsystems.com/chart"
    path: "fedn"
    revision: "0.1.0"
 
# Pull secrets for studio, used to pull images from private repositories such as Harbor
# To create a pull secret run: $ kubectl create secret docker-registry <secret-name> --docker-server=<your-registry-server> --docker-username=<your-name> --docker-password=<your-pword>
imagePullSecrets:
  name: ghcrsecret

#Genreal storage access mode
accessmode: ReadWriteMany

# the cluster domain name (default cluster.local)
cluster_domain: cluster.local

# Enable ingress if you want your to access the studio solution from a kubernetes host/localhost.
domain: studio.127.0.0.1.nip.io
grpc_domain: grpc.studio.127.0.0.1.nip.io # domain for grpc servers (combiners in FL)
session_cookie_domain: .127.0.0.1.nip.io # domain for session cookie, should be .domain
ingress:
  enabled: true
  annotations: {}
  hosts:
    - host: studio.127.0.0.1.nip.io
  tls:
    - secretName: prod-ingress # name of the secret containing the TLS certificate. Please contact Scaleout for details.
      hosts:
        - studio.127.0.0.1.nip.io

### A Postgres database for STACKn ###
# Here we use https://charts.bitnami.com/bitnami postgresql chart
# Please see the documentation for this Bitnami chart for more details on values:
# https://github.com/bitnami/charts/tree/main/bitnami/postgresql
# Please also observe the version we are using in requirements.yaml

postgresql:
  enabled: true
  fullnameOverride: studio-postgres
  commonAnnotations: {"reloader.stakater.com/auto": "true"}
  auth:
    username:
    password:
    postgresPassword:
    database: studio
  primary:
    service:
      ports: 
        postgresql: 5432
    persistence:
      enabled: true
      size: "10Gi"
      accessModes:
        - ReadWriteMany
      storageClass:
    podLabels: {"app":"stackn-studio"} # Do not change unless you know what you are doing.
    resources:
      requests:
        cpu: "100m"
        memory: "256Mi"
      limits:
        cpu: "1000m"
        memory: "1Gi"

## MongoDB chart for FEDn statestore
# Please see the documentation for this Bitnami chart for more details on values:
# https://github.com/bitnami/charts/tree/main/bitnami/mongodb
# Please also observe the version we are using in requirements.yaml

mongodb:
  enabled: true
  commonAnnotations: {"reloader.stakater.com/auto": "true"}
  podLabels: {"app":"stackn-studio","allow-api-access": "true"}

mongoexpress:
  enabled: true
  replicas: 1
  service:
    port: 8081

eventListener:
  studioServiceName: "studio-studio"
  studioServicePort: "8080"
  appStatusEndpoint: "api/app/status"
  appStatusesEndpoint: "api/app/statuses"
  tokenEndpoint: "api/token-auth/"
  image: 
    repository: ghcr.io/scaleoutsystems/studio-kube-controller:main
    pullPolicy: Always # used to ensure that each time we redeploy always pull the latest image


# Will be added in future realease, for now keep "enabled:false"
postgresql-ha:
  enabled: false


# Enable reloader for (see reloader.stakater.com) auto reload of deployments when configmaps change
reloader:
  enabled: true
  namespace: default
  reloader:
    watchGlobally: false

minio:
  enabled: true
  host: ""
  secretName: minio-fedn

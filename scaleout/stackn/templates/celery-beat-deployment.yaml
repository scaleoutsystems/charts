apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.20.0 ()
    reloader.stakater.com/auto: "true"
  creationTimestamp: null
  labels:
    io.kompose.service: {{ .Release.Name }}-celery-beat
    name: {{ .Release.Name }}-celery-beat
  name: {{ .Release.Name }}-celery-beat
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      name: {{ .Release.Name }}-celery-beat
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert
        kompose.version: 1.20.0 ()
      creationTimestamp: null
      labels:
        io.kompose.service: {{ .Release.Name }}-celery-beat
        name: {{ .Release.Name }}-celery-beat
        app: stackn-studio
    spec:
      automountServiceAccountToken: false
      initContainers:
        - name: wait-for-db
          image: postgres
          command: ['sh', '-c', 'until pg_isready --host={{ .Values.postgresql.fullnameOverride }} --port={{ .Values.postgresql.primary.service.ports.postgresql }}; do echo waiting for database; sleep 5; done;']
          resources:
            limits:
              cpu: "100m"
              memory: "512Mi"
            requests:
              cpu: "100m"
              memory: "512Mi"
        - name: wait-for-studio
          image: busybox:1.28.4
          command: ['sh', '-c', "until nslookup {{ .Release.Name }}-{{ .Values.studio.servicename }}; do echo waiting for {{ .Release.Name }}-{{ .Values.studio.servicename }} service; sleep 30; done"]
          resources:
            limits:
              cpu: "100m"
              memory: "512Mi"
            requests:
              cpu: "100m"
              memory: "512Mi"
      containers:
      - args:
        - sh
        - ./scripts/run_beat.sh
        {{- if .Values.studio.securityContext.enabled }}
        securityContext:
          runAsUser: {{ .Values.studio.securityContext.runAsUser }}
          runAsGroup: {{ .Values.studio.securityContext.runAsGroup }}
          allowPrivilegeEscalation: {{ .Values.studio.securityContext.allowPrivilegeEscalation }}
          privileged: {{ .Values.studio.securityContext.privileged }}
          capabilities:
            drop:
              - all
        {{- end }}
        env:
        - name: BASE_PATH
          value: "/app"
        - name: GET_HOSTS_FROM
          value: dns
        - name: DEBUG
          value: "false"
        - name: POSTGRES_DB
          value: {{ .Values.postgresql.global.postgresql.auth.database }}
        - name: POSTGRES_USER
          value: {{ .Values.postgresql.global.postgresql.auth.user }}
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "stackn.postgres.secretName" . }}
              key: password
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "stackn.redis.secretName" . }}
              key: {{ include "stackn.redis.secretPasswordKey" . }}
        - name: RABBITMQ_DEFAULT_PASS
          valueFrom:
            secretKeyRef:
              name: {{ include "stackn.rabbit.secretName" . }}
              key: rabbitmq-password
        - name: DJANGO_SECRET
          valueFrom:
            secretKeyRef:
              name: {{ include "stackn.secretName" . }}
              key: django-secret-key
        {{- if .Values.studio.emailService.enabled }}
        - name: EMAIL_HOST_USER
          valueFrom:
            secretKeyRef:
              name: {{ include "stackn.secretName" . }}
              key: email-host-user
        - name: EMAIL_HOST_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "stackn.secretName" . }}
              key: email-host-password
        - name: EMAIL_API_KEY
          valueFrom:
            secretKeyRef:
              name: {{ include "stackn.secretName" . }}
              key: email-api-key
        {{- end }}
        image: {{ .Values.studio.image.repository }}
        imagePullPolicy: {{ .Values.studio.image.pullPolicy }}
        name: {{ .Release.Name }}-celery-beat
        resources:
          limits:
            cpu: "500m"
            memory: "4Gi"
          requests:
            cpu: "100m"
            memory: "512Mi"
        volumeMounts:
          - mountPath: /app/studio/settings.py
            subPath: settings.py
            name: {{ .Release.Name}}-settings-configmap
      imagePullSecrets:
        - name: {{ .Values.imagePullSecrets.name }}
      restartPolicy: Always
      volumes:
      - name: {{ .Release.Name}}-settings-configmap
        configMap:
          name: {{ .Release.Name}}-settings-configmap
          items:
          - key: settings.py
            path: settings.py

status: {}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-settings-configmap
data:
  settings.py: |-
    """
    Django settings for studio project.

    Generated by 'django-admin startproject' using Django 2.2.6.

    For more information on this file, see
    https://docs.djangoproject.com/en/2.2/topics/settings/

    For the full list of settings and their values, see
    https://docs.djangoproject.com/en/2.2/ref/settings/
    """

    import os
    import sys
    from pathlib import Path


    AUTHENTICATION_BACKENDS = [
        'django.contrib.auth.backends.ModelBackend',
        'guardian.backends.ObjectPermissionBackend',
    ]

    # Build paths inside the project like this: BASE_DIR / 'subdir'.
    BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

    # Crispy Forms
    CRISPY_TEMPLATE_PACK="bootstrap4"

    # Quick-start development settings - unsuitable for production
    # See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

    # SECURITY WARNING: keep the secret key used in production secret!
    SECRET_KEY = 'pyey3^@n)$id1tc3_g7xcb55n7ii1989jy#&%!yk^z(u1us4@*'

    # SECURITY WARNING: don't run with debug turned on in production
    {{ if .Values.studio.debug }}
    DEBUG = True
    {{ else }}
    DEBUG = False
    {{ end }}

    if DEBUG:
        ALLOWED_HOSTS = ['*']
    else:
        ALLOWED_HOSTS = ['{{ .Values.domain }}']

    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

    # Application definition

    INSTALLED_APPS = [
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'rest_framework.authtoken',
        'rest_framework',
        'django.contrib.staticfiles',
        'corsheaders',
        'django_celery_beat',
        'django_extensions',    # for executing runscript among others
        'django_filters',
        'tagulous',
        'guardian',
        'crispy_forms',
        'common',
        "portal",
        "projects",
        "models",
        "monitor",
        "apps",
        "api",
        "customtags",
    ]

    MIDDLEWARE = [
        'django.middleware.security.SecurityMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.middleware.common.CommonMiddleware',
        'django.middleware.csrf.CsrfViewMiddleware',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware',
        'django.middleware.clickjacking.XFrameOptionsMiddleware',
        'corsheaders.middleware.CorsMiddleware'
    ]

    
    REST_FRAMEWORK = {
        'DEFAULT_AUTHENTICATION_CLASSES': [
            'rest_framework.authentication.TokenAuthentication'
        ],
    }

    # Default primary key field type
    # https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

    #Setting this will remove a warning about CorsModel primary keys filed, however a 
    # permission denied error is introduced
    # when django tries to apply a new migration to corsheaders package. This is because
    # the web server is started as stackn user but the migrations folder in corsheader is root
    #DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

    # Django guardian 403 templates
    GUARDIAN_RENDER_403 = True
    GUARDIAN_TEMPLATE_403 = '403.html'

    # Main Url conf for loading all the routing path in Studio
    ROOT_URLCONF = 'studio.urls'

    # Tagulous serialization settings
    SERIALIZATION_MODULES = {
        'xml':    'tagulous.serializers.xml_serializer',
        'json':   'tagulous.serializers.json',
        'python': 'tagulous.serializers.python',
        'yaml':   'tagulous.serializers.pyyaml',
    }

    STATICFILES_FINDERS = (
        'django.contrib.staticfiles.finders.FileSystemFinder',
        'django.contrib.staticfiles.finders.AppDirectoriesFinder',
        # other finders
        'compressor.finders.CompressorFinder',
    )

    STATIC_URL = '/static/'
    #Use in production and together with Nginx 
    STATIC_ROOT = os.path.join(BASE_DIR, 'static/')
    #STATICFILES_DIRS = ( os.path.join('static'), )


    TEMPLATE_LOADERS = (
        'django.template.loaders.filesystem.Loader',
        'django.template.loaders.app_directories.Loader',
        'django.template.loaders.eggs.Loader',
    )

    TEMPLATES = [
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [os.path.join(BASE_DIR, 'templates')],
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                ],
                'libraries': {
                    'custom_tags': 'models.templatetags.custom_tags',
                }
            },
        },
    ]

    WSGI_APPLICATION = 'studio.wsgi.application'
    ASGI_APPLICATION = 'studio.asgi.application'

    # Database
    # https://docs.djangoproject.com/en/2.2/ref/settings/#databases

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': '{{ .Values.postgresql.global.postgresql.auth.database }}',
            'USER': '{{ .Values.postgresql.global.postgresql.auth.username }}',
            'PASSWORD': os.environ.get('POSTGRES_PASSWORD'),
            'HOST': '{{ .Values.postgresql.fullnameOverride }}',
            'PORT': '{{ .Values.postgresql.primary.service.ports.postgresql }}',
        }
    }

    # Password validation
    # https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

    AUTH_PASSWORD_VALIDATORS = [
        {
            'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
        },
    ]

    # Internationalization
    # https://docs.djangoproject.com/en/2.2/topics/i18n/
    LANGUAGE_CODE = 'en-us'
    TIME_ZONE = 'UTC'
    USE_I18N = True
    USE_L10N = True
    USE_TZ = True

    # Media Files for Studio apps
    MEDIA_URL = {{ .Values.studio.media.mount_path | quote }}
    MEDIA_ROOT = {{ .Values.studio.media.mount_path | quote }}

    #From studio
    #MEDIA_URL = '/media/'
    #MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')

    # Related to user registration and authetication workflow
    LOGIN_REDIRECT_URL = '/projects'
    LOGIN_URL = 'login'
    LOGOUT_URL = 'logout'
    INACTIVE_USERS = {{ if .Values.studio.inactive_users }}True{{ else }}False{{ end }}

    # Specific to Studio stack:
    # Redis settings
    REDIS_PORT = 6379
    REDIS_DB = 0
    REDIS_HOST = os.environ.get('REDIS_PORT_6379_TCP_ADDR', '{{ .Release.Name }}-redis-master') #TODO: fetch service dns from bitnami/redis instead
   
    # Celery settings
    CELERY_BROKER_URL = 'amqp://{{ include "stackn.rabbit.username" . }}:{}@{{ include "common.names.fullname" .Subcharts.rabbitmq }}:{{ .Values.rabbitmq.containerPorts.amqp }}//'.format(os.environ.get("RABBITMQ_DEFAULT_PASS"))
    CELERY_RESULT_BACKEND = 'redis://:%s@%s:%d/%d' % (os.environ.get("REDIS_PASSWORD"),REDIS_HOST, REDIS_PORT, REDIS_DB)
    CELERY_TASK_SERIALIZER = 'json'
    CELERY_RESULT_SERIALIZER = 'json'
    CELERY_ACCEPT_CONTENT = ['json']
    CELERY_TIMEZONE = "UTC"
    CELERY_ENABLE_UTC = True
    # For Model Objects creation (check models/models.py, pre_save_model() )
    VERSION_BACKEND = 'studio.version.Version'

    # Other Helm/k8s deployment settings
    CHART_FOLDER = "/app/charts/apps"
    EXTERNAL_KUBECONF = True
    KUBECONFIG = {{ .Values.studio.kubeconfig_file | quote }}
    NAMESPACE = {{ .Values.namespace | default "default" | quote }}
    STORAGECLASS = {{ include "stackn.studio.storageclass" . | quote }}
    
    # App dependencies

    # Apps
    APPS_MODEL = "apps.Apps"
    APPINSTANCE_MODEL = "apps.AppInstance"
    APPCATEGORIES_MODEL ="apps.AppCategories"

    # Models
    MODELS_MODEL = "models.Model"

    # Projects
    PROJECTS_MODEL = "projects.Project"
    PROJECTLOG_MODEL = "projects.ProjectLog"
    ENVIRONMENT_MODEL = "projects.Environment"
    RELEASENAME_MODEL = "projects.ReleaseName"
    # Portal
    PUBLISHEDMODEL_MODEL = "portal.PublishedModel"
    PUBLICMODELOBJECT_MODEL = "portal.PublicModelObject"

    # App statuses
    APPS_STATUS_SUCCESS = ['Running', 'Succeeded', 'Success']
    APPS_STATUS_WARNING = ['Pending', 'Installed',
                        'Waiting', 'Installing', 'Created']

    DOMAIN = {{ .Values.domain | quote }}
    AUTH_DOMAIN = '{{ .Release.Name }}-studio.{{ .Values.namespace | default "default" }}.svc.{{ .Values.cluster_domain | default "cluster.local"}}'
    AUTH_PROTOCOL = 'http'
    STUDIO_URL = 'http://{{ .Release.Name }}-studio:8080'
    # To enable sticky sessions for k8s ingress
    SESSION_COOKIE_DOMAIN = {{ .Values.session_cookie_domain | quote }}
    CSRF_TRUSTED_ORIGINS = ['https://*{{ .Values.session_cookie_domain }}','https://*.127.0.0.1'] + [{{ .Values.studio.csrf_trusted_origins | quote}}]

    # Email
    EMAIL_BACKEND = "django.core.mail.backends.filebased.EmailBackend"
    EMAIL_FILE_PATH =  os.path.join(BASE_DIR, 'sent_emails')
    
    VERSION = {{ .Values.studio.version | quote  }}
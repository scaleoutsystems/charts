apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-settings-configmap
data:
  settings.py: |-
    """
    Django settings for studio project.

    Generated by 'django-admin startproject' using Django 2.2.6.

    For more information on this file, see
    https://docs.djangoproject.com/en/2.2/topics/settings/

    For the full list of settings and their values, see
    https://docs.djangoproject.com/en/2.2/ref/settings/
    """

    import os



    AUTHENTICATION_BACKENDS = [
        'django.contrib.auth.backends.ModelBackend',
    ]

    # Build paths inside the project like this: os.path.join(BASE_DIR, ...)
    BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

    # Crispy Forms
    CRISPY_TEMPLATE_PACK="bootstrap4"

    # Quick-start development settings - unsuitable for production
    # See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

    # SECURITY WARNING: keep the secret key used in production secret!
    SECRET_KEY = 'pyey3^@n)$id1tc3_g7xcb55n7ii1989jy#&%!yk^z(u1us4@*'

    # SECURITY WARNING: don't run with debug turned on in production
    {{ if .Values.studio.debug }}
    DEBUG = True
    {{ else }}
    DEBUG = False
    {{ end }}

    if DEBUG:
        ALLOWED_HOSTS = ['*']
    else:
        ALLOWED_HOSTS = ['{{ .Values.domain }}']

    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

    # Application definition

    INSTALLED_APPS = [
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
        'django_filters',
        'corsheaders',
        'rest_framework',
        'rest_framework.authtoken',
        'api',
        'apps',
        "crispy_forms",
        'deployments',
        'monitor',
        'models',
        'projects',
        'portal',
        'register',
        'tagulous',
        'django_celery_beat',
        'oauth2_provider',
    ]

    OAUTH2_PROVIDER = {
    # this is the list of available scopes
    'SCOPES': {'read': 'Read scope', 'write': 'Write scope', 'groups': 'Access to your groups'}
    }

    REST_FRAMEWORK = {
        'DEFAULT_AUTHENTICATION_CLASSES': [
            'rest_framework.authentication.TokenAuthentication',
            #'rest_framework.permissions.IsAuthenticated',
            'oauth2_provider.contrib.rest_framework.OAuth2Authentication',
        ],
    }

    MIDDLEWARE = [
        'django.middleware.security.SecurityMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.middleware.common.CommonMiddleware',
        'django.middleware.csrf.CsrfViewMiddleware',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware',
        'django.middleware.clickjacking.XFrameOptionsMiddleware',
        'corsheaders.middleware.CorsMiddleware',
    ]

    ROOT_URLCONF = 'studio.urls'

    # Tagulous serialization settings
    SERIALIZATION_MODULES = {
        'xml':    'tagulous.serializers.xml_serializer',
        'json':   'tagulous.serializers.json',
        'python': 'tagulous.serializers.python',
        'yaml':   'tagulous.serializers.pyyaml',
    }

    STATICFILES_FINDERS = (
        'django.contrib.staticfiles.finders.FileSystemFinder',
        'django.contrib.staticfiles.finders.AppDirectoriesFinder',
        'compressor.finders.CompressorFinder',
    )

    TEMPLATE_LOADERS = (
        'django.template.loaders.filesystem.Loader',
        'django.template.loaders.app_directories.Loader',
        'django.template.loaders.eggs.Loader',
    )

    TEMPLATES = [
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [os.path.join(BASE_DIR, 'templates'), os.path.join(BASE_DIR, 'common/templates')],
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                    'social_django.context_processors.backends',  # Add
                    'social_django.context_processors.login_redirect', # Add
                ],
                'libraries': {
                    'custom_tags': 'models.templatetags.custom_tags',
                }
            },
        },
    ]

    WSGI_APPLICATION = 'studio.wsgi.application'
    ASGI_APPLICATION = 'studio.asgi.application'
    
    # Django Crispy Forms   
    django-crispy-forms

    # Database
    # https://docs.djangoproject.com/en/2.2/ref/settings/#databases

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': '{{ .Values.postgresql.postgresqlDatabase }}',
            'USER': '{{ .Values.postgresql.postgresqlUsername }}',
            'PASSWORD': os.environ.get('POSTGRES_PASSWORD'),
            'HOST': '{{ .Values.postgresql.fullnameOverride }}',
            'PORT': '{{ .Values.postgresql.service.port }}',
        }
    }

    # Password validation
    # https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

    AUTH_PASSWORD_VALIDATORS = [
        {
            'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
        },
    ]

    # Internationalization
    # https://docs.djangoproject.com/en/2.2/topics/i18n/
    LANGUAGE_CODE = 'en-us'
    TIME_ZONE = 'UTC'
    USE_I18N = True
    USE_L10N = True
    USE_TZ = True

    # Static files (CSS, JavaScript, Images)
    # https://docs.djangoproject.com/en/2.2/howto/static-files/
    #STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'), ]
    STATIC_URL = '/static/'
    STATIC_ROOT = os.path.join(BASE_DIR, 'static/')
    # Media Files for Studio apps
    MEDIA_URL = {{ .Values.studio.media.mount_path | quote }}
    MEDIA_ROOT = {{ .Values.studio.media.mount_path | quote }}

    MEDIA_URL = '/media/'
    MEDIA_ROOT = '/media/'

    import socket

    # TODO remove after refactor
    #API_HOSTNAME = 'localhost'
    #API_PORT = 8080

    #GIT_REPOS_ROOT = os.path.join(REPO_DIR, 'repos')
    #GIT_REPOS_URL = '/repos/'

    #LOKI_SVC = 'http://{{ .Release.Name }}-loki:3100'
    #PROMETHEUS_SVC = 'http://{{ .Release.Name }}-prometheus-server'
    #CHART_CONTROLLER_URL = 'http://{{ .Release.Name }}-chart-controller'

    REGISTRY_SVC = '{{ .Release.Name }}-docker-registry'
    STUDIO_URL = 'http://{{ .Release.Name }}-studio:8080'

    try:
        from .settings_local import *
    except ImportError as e:
        pass

    # Specific to Studio stack:
    # Redis settings
    REDIS_PORT = 6379
    REDIS_DB = 0
    REDIS_HOST = os.environ.get('REDIS_PORT_6379_TCP_ADDR', '{{ .Release.Name }}-redis')
    #CHANNEL_LAYERS = {
    #    'default': {
    #        'BACKEND': 'channels_redis.core.RedisChannelLayer',
    #        'CONFIG': {
    #            'hosts': [(REDIS_HOST, REDIS_PORT),],
    #        },
    #    },
    #}
    # Celery settings
    CELERY_BROKER_URL = 'amqp://{{ include "stackn.rabbit.username" . }}:{}@{{ .Release.Name }}-rabbit:5672//'.format(os.environ.get("RABBITMQ_DEFAULT_PASS"))
    CELERY_RESULT_BACKEND = 'redis://%s:%d/%d' % (REDIS_HOST, REDIS_PORT, REDIS_DB)
    CELERY_TASK_SERIALIZER = 'json'
    CELERY_RESULT_SERIALIZER = 'json'
    CELERY_ACCEPT_CONTENT = ['json']
    CELERY_TIMEZONE = "UTC"
    CELERY_ENABLE_UTC = True
    # For Model Objects creation (check models/models.py, pre_save_model() )
    VERSION_BACKEND = 'studio.version.Version'

    EXTERNAL_KUBECONF = True
    NAMESPACE = {{ .Values.namespace | default "default" | quote }}
    STORAGECLASS = {{ .Values.storageClassName | default "aws-efs" | quote }}
    
    try:
        from .settings_local import *
    except ImportError as e:
        pass

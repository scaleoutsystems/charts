apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-settings-configmap
data:
  settings.py: |-
    """
    Django settings for studio project.

    Generated by 'django-admin startproject' using Django 2.2.6.

    For more information on this file, see
    https://docs.djangoproject.com/en/2.2/topics/settings/

    For the full list of settings and their values, see
    https://docs.djangoproject.com/en/2.2/ref/settings/
    """

    import os
    import logging

    VERSION_BACKEND = 'studio.version.Version'
    LOGGING_LEVEL = logging.DEBUG

    PROJECT_ROLES = ['guest', 'member', 'admin']

    {{ if .Values.ingress.v1beta1 }}
    INGRESS_V1BETA1 = True
    {{ else }}
    INGRESS_V1BETA1 = False
    {{ end }}

    # Permissions

    # Project settings
    PROJECT_SETTINGS_PERM = {
      'view': ['member', 'admin'],
      'view_credentials': ['member', 'admin'],
      'env_settings': ['member', 'admin'],
      'collab_settings': ['member', 'admin'],
      'add_member': ['admin'],
      'publish_github': ['member', 'admin'],
      'danger_zone': ['admin']
    }

    MONITOR_PERM = {
      'view': ['admin']
    }

    {{ if .Values.oidc.enabled }}
    KC_REALM = {{ .Values.oidc.realm | quote }}
    KC_URL = "{{ .Values.oidc.host }}"
    KC_ADMIN_URL = "{{ .Values.oidc.host }}/auth"
    OIDC_RP_CLIENT_ID = {{ .Values.oidc.client_id | quote }}
    OIDC_RP_CLIENT_SECRET = {{ include "stackn.oidc.clientsecret" . | quote }}
    OIDC_OP_REALM_AUTH = "{{ .Values.oidc.host }}/auth/realms"
    OIDC_OP_AUTHORIZATION_ENDPOINT = "{{ .Values.oidc.host }}/auth/realms/{{ .Values.oidc.realm }}/protocol/openid-connect/auth"
    OIDC_OP_TOKEN_ENDPOINT = "{{ .Values.oidc.host }}/auth/realms/{{ .Values.oidc.realm }}/protocol/openid-connect/token"
    OIDC_OP_USER_ENDPOINT = "{{ .Values.oidc.host }}/auth/realms/{{ .Values.oidc.realm }}/protocol/openid-connect/userinfo"
    OIDC_OP_LOGOUT_ENDPOINT = "{{ .Values.oidc.host }}/auth/realms/{{ .Values.oidc.realm }}/protocol/openid-connect/logout"
    OIDC_OP_LOGOUT_URL_METHOD = 'studio.OIDClogout.keycloak_logout'
    OIDC_STORE_ACCESS_TOKEN = True
    OIDC_STORE_ID_TOKEN = True
    {{ if eq .Values.oidc.verify_ssl false }}
    print("WARNING: Skipping SSL verification.")
    OIDC_VERIFY_SSL = False
    {{ else }}
    OIDC_VERIFY_SSL = True
    {{ end }}
    OIDC_RENEW_ID_TOKEN_EXPIRY_SECONDS = {{ .Values.oidc.id_token_expiry_seconds | default "180" }}
    LOGIN_URL = "/projects"
    LOGIN_REDIRECT_URL = "/projects"
    LOGOUT_REDIRECT_URL = "/"
    OIDC_RP_SIGN_ALGO = {{ .Values.oidc.sign_algo | quote }}
    OIDC_OP_JWKS_ENDPOINT = "{{ .Values.oidc.host }}/auth/realms/{{ .Values.oidc.realm }}/protocol/openid-connect/certs"
    {{ end }}
    AUTHENTICATION_BACKENDS = [
        'django.contrib.auth.backends.ModelBackend',
        {{ if .Values.oidc.enabled }}
        'studio.OIDCbackend.OIDCbackend'
        {{ end }}
    ]

    # Build paths inside the project like this: os.path.join(BASE_DIR, ...)
    BASE_DIR = os.path.dirname(os.path.abspath(__file__))
    REPO_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

    DOMAIN = {{ .Values.domain | quote }}
    STUDIO_HOST = "https://{{ .Values.domain }}"
    # Quick-start development settings - unsuitable for production
    # See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

    # SECURITY WARNING: keep the secret key used in production secret!
    SECRET_KEY = 'pyey3^@n)$id1tc3_g7xcb55n7ii1989jy#&%!yk^z(u1us4@*'

    # SECURITY WARNING: don't run with debug turned on in production
    {{ if .Values.studio.debug }}
    DEBUG = True
    {{ else }}
    DEBUG = False
    {{ end }}

    if DEBUG:
        ALLOWED_HOSTS = ['*']
    else:
        ALLOWED_HOSTS = ['{{ .Values.domain }}']

    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

    # Application definition

    INSTALLED_APPS = [
    {{ if .Values.fedn.enabled }}
        'alliance_admin',
    {{ end }}
        'django.contrib.auth',
        'django.contrib.admin',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
        'django_filters',
        'oauth2_provider',
        'corsheaders',
        'rest_framework',
        'rest_framework.authtoken',
        'ingress',
        'api',
        'projects',
        'models',
        'monitor',
        'reports',
        'files',
        'datasets',
        'workflows',
        'deployments',
        'bootstrap_modal_forms',
        'studio_admin',
        'apps',
        'portal',
        'django_celery_beat',
        'django_plotly_dash.apps.DjangoPlotlyDashConfig',
        'channels',
    ]

    X_FRAME_OPTIONS = 'SAMEORIGIN'

    REST_FRAMEWORK = {
        'DEFAULT_AUTHENTICATION_CLASSES': [
            'studio.KCRFbackend.KeycloakAuthentication',
        ],
    }

    MIDDLEWARE = [
        'django.middleware.security.SecurityMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.middleware.common.CommonMiddleware',
        'django.middleware.csrf.CsrfViewMiddleware',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        {{ if .Values.oidc.enabled }}
        'mozilla_django_oidc.middleware.SessionRefresh',
        {{ end }}
        'django.contrib.messages.middleware.MessageMiddleware',
        'django.middleware.clickjacking.XFrameOptionsMiddleware',
        'corsheaders.middleware.CorsMiddleware',
        'django_plotly_dash.middleware.BaseMiddleware'
    ]
    STATICFILES_FINDERS = (
        'django.contrib.staticfiles.finders.FileSystemFinder',
        'django.contrib.staticfiles.finders.AppDirectoriesFinder',
        # other finders..
        'compressor.finders.CompressorFinder',
    )

    ROOT_URLCONF = 'studio.urls'

    TEMPLATE_LOADERS = (
        'django.template.loaders.filesystem.Loader',
        'django.template.loaders.app_directories.Loader',
        'django.template.loaders.eggs.Loader',
    )

    TEMPLATES = [
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [os.path.join(REPO_DIR, 'templates')],
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                ],
            },
        },
    ]

    WSGI_APPLICATION = 'studio.wsgi.application'
    ASGI_APPLICATION = 'studio.asgi.application'

    # Lab settings
    LABS = {
      'ingress': {
        'secretName': '{{ .Values.labs.ingress.secretName }}'
      }
    }
    

    # Database
    # https://docs.djangoproject.com/en/2.2/ref/settings/#databases

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': '{{ include "stackn.postgres.name" . }}',
            'USER': '{{ include "stackn.postgres.user" . }}',
            'PASSWORD': os.environ.get('POSTGRES_PASSWORD'),
            'HOST': '{{ include "stackn.postgres.host" . }}',
            'PORT': {{ include "stackn.postgres.port" . }},
        }
    }

    # Password validation
    # https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

    AUTH_PASSWORD_VALIDATORS = [
        {
            'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
        },
    ]

    # Internationalization
    # https://docs.djangoproject.com/en/2.2/topics/i18n/

    LANGUAGE_CODE = 'en-us'

    TIME_ZONE = 'UTC'

    USE_I18N = True

    USE_L10N = True

    USE_TZ = True

    # Static files (CSS, JavaScript, Images)
    # https://docs.djangoproject.com/en/2.2/howto/static-files/

    STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'), ]

    STATIC_URL = '/static/'
    STATIC_ROOT = os.path.join(REPO_DIR, 'static/')

    MEDIA_URL = '/media/'
    MEDIA_ROOT = '/media/'

    import socket

    # TODO remove after refactor
    API_HOSTNAME = 'localhost'
    API_PORT = 8080

    GIT_REPOS_ROOT = os.path.join(REPO_DIR, 'repos')
    GIT_REPOS_URL = '/repos/'

    LOKI_SVC = 'http://{{ .Release.Name }}-loki:3100'
    PROMETHEUS_SVC = 'http://{{ .Release.Name }}-prometheus-server'
    REGISTRY_SVC = '{{ .Release.Name }}-docker-registry'
    CHART_CONTROLLER_URL = 'http://{{ .Release.Name }}-chart-controller'
    STUDIO_URL = 'http://{{ .Release.Name }}-studio:8080'

    try:
        from .settings_local import *
    except ImportError as e:
        pass

    REDIS_PORT = 6379
    REDIS_DB = 0
    REDIS_HOST = os.environ.get('REDIS_PORT_6379_TCP_ADDR', '{{ .Release.Name }}-redis')

    CHANNEL_LAYERS = {
        'default': {
            'BACKEND': 'channels_redis.core.RedisChannelLayer',
            'CONFIG': {
                'hosts': [(REDIS_HOST, REDIS_PORT),],
            },
        },
    }

    CELERY_BROKER_URL = 'amqp://{{ include "stackn.rabbit.username" . }}:{}@{{ .Release.Name }}-rabbit:5672//'.format(os.environ.get("RABBITMQ_DEFAULT_PASS"))
    CELERY_RESULT_BACKEND = 'redis://%s:%d/%d' % (REDIS_HOST, REDIS_PORT, REDIS_DB)
    CELERY_TASK_SERIALIZER = 'json'
    CELERY_RESULT_SERIALIZER = 'json'
    CELERY_ACCEPT_CONTENT = ['json']
    CELERY_TIMEZONE = "UTC"
    CELERY_ENABLE_UTC = True

    EXTERNAL_KUBECONF = False
    STORAGECLASS = {{ .Values.storageClassName | default "aws-efs" | quote }}

    NAMESPACE = {{ .Values.namespace | default "default" | quote }}

    try:
        from .settings_local import *
    except ImportError as e:
        pass

    import os

    try:
        apps = [os.environ.get("APPS").split(" ")]
        for app in apps:
            INSTALLED_APPS += [app]
    except Exception as e:
        pass
